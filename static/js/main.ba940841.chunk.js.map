{"version":3,"sources":["components/RecipeTile.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeTile","title","url","className","src","alt","App","useState","query","setQuery","recipes","setRecipes","getRecipes","a","axios","get","result","data","hits","console","log","onClick","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","map","recipe","idx","food","label","image","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAWeA,EATI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IACvB,OACI,sBAAKC,UAAU,aAAf,UACA,qBAAKA,UAAU,mBAAmBC,IAAKF,EAAKG,IAAI,eAC5C,mBAAGF,UAAU,oBAAb,SAAkCF,QCsD/BK,MAvDf,WAAgB,IAAD,EAEYC,mBAAS,IAFrB,mBAENC,EAFM,KAEAC,EAFA,OAGgBF,mBAAS,IAHzB,mBAGNG,EAHM,KAGEC,EAHF,OAIsBJ,mBAAS,SAJ/B,mBAQPL,GARO,UAQJ,0CAAsCM,EAAtC,mBAFQ,WAER,oBADY,qCAPR,SAUEI,IAVF,2EAUb,4BAAAC,EAAA,sEACqBC,IAAMC,IAAIb,GAD/B,OACMc,EADN,OAEEL,EAAWK,EAAOC,KAAKC,MACvBC,QAAQC,IAAIJ,EAAOC,KAAKC,MAH1B,4CAVa,sBAwBb,OACE,sBAAKf,UAAU,MAAf,UACA,oBAAIkB,QAAST,EAAb,gCACA,uBAAMT,UAAU,kBAAkBmB,SAVnB,SAACC,GAChBA,EAAEC,iBACFZ,KAQA,UACI,uBAAOT,UAAU,aAAasB,KAAK,OAAOC,YAAY,kBAAkBC,MAAOnB,EAAOoB,SAAU,SAACL,GAAD,OAAMd,EAASc,EAAEM,OAAOF,UACtH,uBAAOxB,UAAU,cAAcsB,KAAK,SAASE,MAAM,cASvD,qBAAKxB,UAAU,cAAf,SAEMO,IAAY,IACZA,EAAQoB,KAAI,SAACC,EAAOC,GAClB,IAAMC,EAAOF,EAAOA,OAEpB,OADAZ,QAAQC,IAAIa,EAAK/B,KAEf,cAAC,EAAD,CAAsBD,MAAOgC,EAAKC,MAAOhC,IAAK+B,EAAKE,OAAlCH,YCtClBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ba940841.chunk.js","sourcesContent":["import \"./RecipeTile.css\"\n\nconst RecipeTile = ({title,url}) => {\n    return (\n        <div className=\"recipeTile\">\n        <img className=\"recipeTitle__img\" src={url} alt=\"recipe_img\" />\n            <p className=\"recipeTitle__name\">{title}</p>\n        </div>\n    )\n}\n\nexport default RecipeTile\n","import {useState,useEffect} from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport RecipeTile from './components/RecipeTile';\n\nfunction App() {\n\n  const [query,setQuery] = useState(\"\")\n  const [recipes,setRecipes] = useState([])\n  const [healthLabel,setHealthLabel]=useState(\"vegan\")\n\n  const YOUR_APP_ID = `82e453da`;\n  const YOUR_APP_KEY = \"3bb5d1a3b992f408b9003effd74c9c22\";\n  const url = `https://api.edamam.com/search?q=${query}&app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}`;\n  \n  async function getRecipes() {\n    var result = await axios.get(url);\n    setRecipes(result.data.hits) \n    console.log(result.data.hits)\n\n  }\n  \n  const onSubmit = (e) => {\n    e.preventDefault();\n    getRecipes();\n\n  }\n\n\n  return (\n    <div className=\"App\">\n    <h1 onClick={getRecipes}>Food Recipe Plaza </h1>\n    <form className=\"app__searchForm\" onSubmit={onSubmit}>\n        <input className=\"app__input\" type=\"text\" placeholder=\"Enter Ingrident\" value={query} onChange={(e)=> setQuery(e.target.value)} />\n          <input className=\"app__submit\" type=\"submit\" value=\"Search\"/>\n          {/* <select className='app_healthLabels'>\n            <option onClick={() => setHealthLabel(\"vegan\")}>Vegan</option>\n            <option value=\"vegeterian\" onClick={() => setHealthLabel(\"vegeterian\")}>Vegeterian</option>\n            <option onClick={() => setHealthLabel(\"vegan\")}>Vegan</option>\n            <option onClick={() => setHealthLabel(\"vegan\")}>Vegan</option>\n            <option onClick={() => setHealthLabel(\"vegan\")}>Vegan</option>\n          </select> */}\n    </form>\n      <div className=\"app_recipes\">\n          {\n            recipes !== [] &&\n            recipes.map((recipe,idx)=> {\n              const food = recipe.recipe;\n              console.log(food.url)\n              return (\n                <RecipeTile key={idx} title={food.label} url={food.image} />\n              )\n              })\n              }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}